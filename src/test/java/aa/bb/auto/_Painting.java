package aa.bb.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import aa.bb.Artist;
import aa.bb.Orders;

/**
 * Class _Painting was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Painting extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> PAINTING_NAME = PropertyFactory.createString("paintingName", String.class);
    public static final StringProperty<String> PAINTINGSTYLE = PropertyFactory.createString("paintingstyle", String.class);
    public static final EntityProperty<Artist> ARTIST = PropertyFactory.createEntity("artist", Artist.class);
    public static final EntityProperty<Orders> ORDERS = PropertyFactory.createEntity("orders", Orders.class);

    protected String paintingName;
    protected String paintingstyle;

    protected Object artist;
    protected Object orders;

    public void setPaintingName(String paintingName) {
        beforePropertyWrite("paintingName", this.paintingName, paintingName);
        this.paintingName = paintingName;
    }

    public String getPaintingName() {
        beforePropertyRead("paintingName");
        return this.paintingName;
    }

    public void setPaintingstyle(String paintingstyle) {
        beforePropertyWrite("paintingstyle", this.paintingstyle, paintingstyle);
        this.paintingstyle = paintingstyle;
    }

    public String getPaintingstyle() {
        beforePropertyRead("paintingstyle");
        return this.paintingstyle;
    }

    public void setArtist(Artist artist) {
        setToOneTarget("artist", artist, true);
    }

    public Artist getArtist() {
        return (Artist)readProperty("artist");
    }

    public void setOrders(Orders orders) {
        setToOneTarget("orders", orders, true);
    }

    public Orders getOrders() {
        return (Orders)readProperty("orders");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "paintingName":
                return this.paintingName;
            case "paintingstyle":
                return this.paintingstyle;
            case "artist":
                return this.artist;
            case "orders":
                return this.orders;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "paintingName":
                this.paintingName = (String)val;
                break;
            case "paintingstyle":
                this.paintingstyle = (String)val;
                break;
            case "artist":
                this.artist = val;
                break;
            case "orders":
                this.orders = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.paintingName);
        out.writeObject(this.paintingstyle);
        out.writeObject(this.artist);
        out.writeObject(this.orders);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.paintingName = (String)in.readObject();
        this.paintingstyle = (String)in.readObject();
        this.artist = in.readObject();
        this.orders = in.readObject();
    }

}
