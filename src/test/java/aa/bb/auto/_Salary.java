package aa.bb.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import aa.bb.Dept;
import aa.bb.Empl;

/**
 * Class _Salary was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Salary extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> SALARY_AMOUNT = PropertyFactory.createString("salaryAmount", String.class);
    public static final EntityProperty<Dept> DEPT = PropertyFactory.createEntity("dept", Dept.class);
    public static final EntityProperty<Empl> EMPL = PropertyFactory.createEntity("empl", Empl.class);

    protected String salaryAmount;

    protected Object dept;
    protected Object empl;

    public void setSalaryAmount(String salaryAmount) {
        beforePropertyWrite("salaryAmount", this.salaryAmount, salaryAmount);
        this.salaryAmount = salaryAmount;
    }

    public String getSalaryAmount() {
        beforePropertyRead("salaryAmount");
        return this.salaryAmount;
    }

    public void setDept(Dept dept) {
        setToOneTarget("dept", dept, true);
    }

    public Dept getDept() {
        return (Dept)readProperty("dept");
    }

    public void setEmpl(Empl empl) {
        setToOneTarget("empl", empl, true);
    }

    public Empl getEmpl() {
        return (Empl)readProperty("empl");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "salaryAmount":
                return this.salaryAmount;
            case "dept":
                return this.dept;
            case "empl":
                return this.empl;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "salaryAmount":
                this.salaryAmount = (String)val;
                break;
            case "dept":
                this.dept = val;
                break;
            case "empl":
                this.empl = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.salaryAmount);
        out.writeObject(this.dept);
        out.writeObject(this.empl);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.salaryAmount = (String)in.readObject();
        this.dept = in.readObject();
        this.empl = in.readObject();
    }

}
