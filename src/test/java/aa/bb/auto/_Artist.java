package aa.bb.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import aa.bb.Painting;

/**
 * Class _Artist was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Artist extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final NumericProperty<Integer> AGE = PropertyFactory.createNumeric("age", Integer.class);
    public static final StringProperty<String> ARTISTNAME = PropertyFactory.createString("artistname", String.class);
    public static final ListProperty<Painting> PAINTINGS = PropertyFactory.createList("paintings", Painting.class);

    protected Integer age;
    protected String artistname;

    protected Object paintings;

    public void setAge(int age) {
        beforePropertyWrite("age", this.age, age);
        this.age = age;
    }

    public int getAge() {
        beforePropertyRead("age");
        if(this.age == null) {
            return 0;
        }
        return this.age;
    }

    public void setArtistname(String artistname) {
        beforePropertyWrite("artistname", this.artistname, artistname);
        this.artistname = artistname;
    }

    public String getArtistname() {
        beforePropertyRead("artistname");
        return this.artistname;
    }

    public void addToPaintings(Painting obj) {
        addToManyTarget("paintings", obj, true);
    }

    public void removeFromPaintings(Painting obj) {
        removeToManyTarget("paintings", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Painting> getPaintings() {
        return (List<Painting>)readProperty("paintings");
    }

    protected abstract void onPostLoad();

    protected abstract void onPrePersist();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "age":
                return this.age;
            case "artistname":
                return this.artistname;
            case "paintings":
                return this.paintings;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "age":
                this.age = (Integer)val;
                break;
            case "artistname":
                this.artistname = (String)val;
                break;
            case "paintings":
                this.paintings = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.age);
        out.writeObject(this.artistname);
        out.writeObject(this.paintings);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.age = (Integer)in.readObject();
        this.artistname = (String)in.readObject();
        this.paintings = in.readObject();
    }

}
